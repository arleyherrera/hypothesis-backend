// tests/metrics/objetivo1-semantic-evaluation.test.js

const VectorContextService = require('../../services/vectorContextService');
const { Hypothesis, Artifact } = require('../../models');
const fs = require('fs');
const path = require('path');

describe('OBJETIVO 1 - M√âTRICAS: Sistema de Evaluaci√≥n Sem√°ntica', () => {
  let errorLogPath = path.join(__dirname, '../../logs/semantic-errors.log');
  let criticalErrors = [];
  
  // Interceptar TODOS los errores del sistema
  beforeAll(() => {
    // Crear directorio de logs si no existe
    const logDir = path.dirname(errorLogPath);
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
    
    // Interceptar console.error
    const originalError = console.error;
    console.error = (...args) => {
      const errorMsg = args.join(' ');
      criticalErrors.push(errorMsg);
      fs.appendFileSync(errorLogPath, `${new Date().toISOString()} - ERROR: ${errorMsg}\n`);
      originalError.apply(console, args);
    };
    
    // Interceptar errores no capturados
    process.on('uncaughtException', (error) => {
      criticalErrors.push(`CRITICAL: ${error.message}`);
      fs.appendFileSync(errorLogPath, `${new Date().toISOString()} - CRITICAL: ${error.message}\n${error.stack}\n`);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      criticalErrors.push(`CRITICAL PROMISE: ${reason}`);
      fs.appendFileSync(errorLogPath, `${new Date().toISOString()} - CRITICAL PROMISE: ${reason}\n`);
    });
  });

  afterAll(() => {
    // Generar reporte de errores
    const report = {
      timestamp: new Date().toISOString(),
      totalErrors: criticalErrors.length,
      criticalErrors: criticalErrors.filter(e => e.includes('CRITICAL')),
      semanticErrors: criticalErrors.filter(e => e.includes('semantic') || e.includes('vector'))
    };
    
    fs.writeFileSync(
      path.join(__dirname, '../../logs/semantic-evaluation-report.json'),
      JSON.stringify(report, null, 2)
    );
  });

  describe('M√âTRICA 1: 0 errores cr√≠ticos en logs del sistema', () => {
    test('No debe haber errores cr√≠ticos durante evaluaci√≥n sem√°ntica', async () => {
      criticalErrors = []; // Reset para esta prueba
      
      const vectorService = new VectorContextService();
      
      // Crear datos de prueba complejos
      const hypothesis = await Hypothesis.create({
        problem: 'Los emprendedores pierden mucho tiempo validando ideas que no funcionan eficientemente',
        name: 'Sistema de Validaci√≥n R√°pida',
        solution: 'Plataforma automatizada con IA para validaci√≥n en 48 horas',
        customerSegment: 'Emprendedores tecnol√≥gicos con presupuesto limitado',
        valueProposition: 'Reduce el tiempo de validaci√≥n de 3 meses a 2 d√≠as',
        userId: 1
      });

      // Probar todas las operaciones del sistema sem√°ntico
      const operations = [
        // 1. Almacenamiento de contexto
        async () => {
          const artifact = await Artifact.create({
            hypothesisId: hypothesis.id,
            name: 'MVP Detallado',
            phase: 'construir',
            description: 'Plan completo del MVP',
            content: 'Contenido extenso sobre el MVP con validaci√≥n r√°pida usando IA y automatizaci√≥n'
          });
          await vectorService.storeArtifactContext(artifact);
        },
        
        // 2. Recuperaci√≥n de contexto
        async () => {
          await vectorService.getRelevantContext(hypothesis.id, 'medir', 'KPIs');
        },
        
        // 3. An√°lisis de coherencia
        async () => {
          await vectorService.getContextStats(hypothesis.id);
        },
        
        // 4. Actualizaci√≥n de contexto
        async () => {
          const artifact = await Artifact.findOne({ where: { hypothesisId: hypothesis.id } });
          artifact.content = 'Contenido actualizado con nuevas m√©tricas de validaci√≥n';
          await artifact.save();
          await vectorService.updateArtifactContext(artifact);
        }
      ];

      // Ejecutar todas las operaciones
      for (const operation of operations) {
        await operation();
      }

      // VALIDACI√ìN DE M√âTRICA
      const semanticCriticalErrors = criticalErrors.filter(error => 
        error.includes('CRITICAL') || 
        error.includes('Error al') ||
        error.includes('Failed to') ||
        error.includes('Exception')
      );

      expect(semanticCriticalErrors).toHaveLength(0);
      
      if (semanticCriticalErrors.length > 0) {
        console.log('‚ùå Errores cr√≠ticos encontrados:', semanticCriticalErrors);
      }
    });

    test('Sistema debe manejar casos extremos sin errores cr√≠ticos', async () => {
      criticalErrors = [];
      
      const vectorService = new VectorContextService();
      
      // Casos extremos
      const edgeCases = [
        // Texto muy largo
        async () => {
          const longContent = 'a'.repeat(10000);
          await vectorService.generateEmbedding(longContent);
        },
        
        // Texto con caracteres especiales
        async () => {
          const specialContent = 'üöÄ √ëo√±o ‰Ω†Â•Ω ŸÖÿ±ÿ≠ÿ®ÿß @#$%^&*()';
          await vectorService.generateEmbedding(specialContent);
        },
        
        // Hip√≥tesis inexistente
        async () => {
          const result = await vectorService.getContextStats(99999);
          expect(result).toBeNull(); // Debe retornar null, no error
        }
      ];

      for (const testCase of edgeCases) {
        await testCase();
      }

      // Verificar que no hay errores cr√≠ticos
      expect(criticalErrors.filter(e => e.includes('CRITICAL'))).toHaveLength(0);
    });
  });

  describe('M√âTRICA 2: Todas las pruebas de integraci√≥n ejecutadas exitosamente', () => {
    test('Integraci√≥n completa: Hip√≥tesis ‚Üí Artefactos ‚Üí Vectores ‚Üí Coherencia', async () => {
      const testResults = {
        storeContext: false,
        retrieveContext: false,
        calculateCoherence: false,
        updateContext: false,
        deleteContext: false
      };

      try {
        // 1. Crear hip√≥tesis completa
        const hypothesis = await Hypothesis.create({
          problem: 'Problema complejo que requiere validaci√≥n sem√°ntica profunda',
          name: 'Test Integraci√≥n Completa',
          solution: 'Soluci√≥n innovadora con m√∫ltiples componentes',
          customerSegment: 'Segmento espec√≠fico de prueba',
          valueProposition: 'Propuesta de valor √∫nica y medible',
          userId: 1
        });

        // 2. Crear artefactos de m√∫ltiples fases
        const phases = ['construir', 'medir', 'aprender'];
        const artifacts = [];

        for (const phase of phases) {
          const artifact = await Artifact.create({
            hypothesisId: hypothesis.id,
            name: `Artefacto ${phase}`,
            phase: phase,
            description: `Descripci√≥n para ${phase}`,
            content: `Contenido detallado sobre ${phase} con coherencia sem√°ntica`
          });
          
          // Almacenar contexto
          const stored = await vectorService.storeArtifactContext(artifact);
          testResults.storeContext = stored;
          artifacts.push(artifact);
        }

        // 3. Recuperar contexto relevante
        const context = await vectorService.getRelevantContext(
          hypothesis.id, 
          'pivotar', 
          'Estrategia de Pivote'
        );
        testResults.retrieveContext = context !== null;

        // 4. Calcular coherencia
        const stats = await vectorService.getContextStats(hypothesis.id);
        testResults.calculateCoherence = stats !== null && stats.globalCoherence.score > 0;

        // 5. Actualizar contexto
        artifacts[0].content = 'Contenido actualizado para mejorar coherencia';
        await artifacts[0].save();
        const updated = await vectorService.updateArtifactContext(artifacts[0]);
        testResults.updateContext = updated;

        // 6. Eliminar contexto
        const deleted = await vectorService.deleteArtifactContext(artifacts[0].id);
        testResults.deleteContext = deleted;

        // VALIDACI√ìN: Todas las operaciones deben ser exitosas
        Object.entries(testResults).forEach(([operation, success]) => {
          expect(success).toBe(true);
        });

      } catch (error) {
        fail(`Error en integraci√≥n: ${error.message}`);
      }
    });

    test('Coherencia multi-fase debe funcionar correctamente', async () => {
      // Crear hip√≥tesis con artefactos en todas las fases
      const hypothesis = await Hypothesis.create({
        problem: 'Problema que requiere an√°lisis multi-fase',
        name: 'Test Multi-fase',
        solution: 'Soluci√≥n iterativa',
        customerSegment: 'M√∫ltiples segmentos',
        valueProposition: 'Valor evolutivo',
        userId: 1
      });

      const allPhases = ['construir', 'medir', 'aprender', 'pivotar', 'iterar'];
      
      // Crear 2 artefactos por fase
      for (const phase of allPhases) {
        for (let i = 1; i <= 2; i++) {
          const artifact = await Artifact.create({
            hypothesisId: hypothesis.id,
            name: `${phase} - Artefacto ${i}`,
            phase: phase,
            description: `Descripci√≥n ${i}`,
            content: `Contenido coherente para ${phase} n√∫mero ${i}`
          });
          
          await vectorService.storeArtifactContext(artifact);
        }
      }

      // Obtener estad√≠sticas
      const stats = await vectorService.getContextStats(hypothesis.id);

      // Validaciones de integraci√≥n
      expect(stats.totalContexts).toBe(10); // 2 por cada una de las 5 fases
      expect(stats.completedPhases).toBe(5);
      expect(Object.keys(stats.phaseCoherence)).toHaveLength(5);
      expect(stats.globalCoherence.score).toBeGreaterThan(0);
      expect(stats.globalCoherence.transitions).toBeDefined();
    });
  });
});